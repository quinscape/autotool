const { EOL } = require("os")
const { loadSchema } = require("../loadSchema")
const { TABLE, FIELD, ID_FIELD, FK_FIELD, ALTER_TABLE, PK, FKS} = require("./sql-template")

function getSQLType(field)
{
    const { type } = field

    switch (type)
    {
        case "BigDecimal":
        {
            const { precision, scale } = field
            return "numeric(" + precision + ", " + scale + ")"
        }
        case "Boolean":
            return "boolean"
        case "Byte":
            return "smallint"
        case "Date":
            return "date"
        case "Int":
            return "integer"
        case "JSONB":
            return "jsonb"
        case "Long":
            return "bigint"
        case "String":
        {
            const { maxLength } = field
            return "character varying(" + maxLength + ")"
        }
        case "Text":
            return "text"
        case "Timestamp":
            return "timestamp without time zone"
        default:
            throw new Error("Unhandled field type: " + type)
    }
}


function createRelatedLinkTables(schema, opts, left)
{
    const { dbSchema, dbOwner } = opts

    const { linkTables } = schema

    let out = ""

    for (let i = 0; i < linkTables.length; i++)
    {
        const lt = linkTables[i]

        const { name, refs } = lt

        if (refs[0].type !== left)
        {
            continue;
        }

        out += `-- Link Table: ${dbSchema}.${name}${EOL}${EOL}`

        out += TABLE(dbSchema, name, opts, () => {

            // FIELDS
            let out = ID_FIELD()
            // FK FIELDS
            for (let j = 0; j < refs.length; j++)
            {
                const ref = refs[j]
                out += FK_FIELD(ref.name, ref.nonNull, j < refs.length - 1)
            }
            return out
        })

        out += EOL + ALTER_TABLE(dbSchema, name, dbOwner)
    }

    return out

}


function createLinkTableKeys(schema, opts, tableName)
{
    const { linkTables } = schema
    const { dbSchema } = opts

    let out = ""

    out += `-- Link Table Primary Keys${EOL}${EOL}`

    for (let i = 0; i < linkTables.length; i++)
    {
        const {name, refs} = linkTables[i]

        out += PK(dbSchema, name, opts, refs)
    }

    out += `-- Link Table Foreign Keys${EOL}${EOL}`

    for (let i = 0; i < linkTables.length; i++)
    {
        const {name, refs} = linkTables[i]

        out += FKS(dbSchema, name, opts, refs)
    }

    return out
}


function createSQLScript(schema, opts)
{
    const { types, linkTables } = schema
    const { dbSchema, dbOwner } = opts

    let out = "-- Generated by @fforw/autotool" + EOL

    for (let i = 0; i < types.length; i++)
    {
        const type = types[i]
        const tableName = type.name

        out += `${EOL}-- Table: ${dbSchema}.${tableName}${EOL}${EOL}`

        out += TABLE(
            dbSchema,
            tableName,
            opts,
            () => {

                // FIELDS
                let out = ID_FIELD()
                const {fields, refs} = type
                for (let j = 0; j < fields.length; j++)
                {
                    const field = fields[j]

                    const typeExpr = getSQLType(field)
                    out += FIELD(field.name, getSQLType(field), field.nonNull, refs.length || j < fields.length - 1)
                }

                // FK FIELDS
                for (let j = 0; j < refs.length; j++)
                {
                    const ref = refs[j]
                    out += FK_FIELD(ref.name, ref.nonNull, j < refs.length - 1)
                }
                return out
            })

        out += EOL + ALTER_TABLE(dbSchema, tableName, dbOwner)

        out += createRelatedLinkTables(schema, opts, tableName)
    }

    out += `${EOL}-- Primary Keys${EOL}${EOL}`

    for (let i = 0; i < types.length; i++)
    {
        const type = types[i]
        const tableName = type.name

        out += PK(dbSchema, tableName, opts, type.refs)
    }

    out += `-- Foreign Keys${EOL}${EOL}`

    for (let i = 0; i < types.length; i++)
    {
        const type = types[i]
        const tableName = type.name

        out += FKS(dbSchema, tableName, opts, type.refs)
    }

    out += createLinkTableKeys(schema, opts)
    return out
}


module.exports = function db(path,opts)
{
    return loadSchema(path,opts)
        .then(
            (schema) => createSQLScript(schema, opts)
        )
}

